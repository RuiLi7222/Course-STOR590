library(GGally)
ggpairs(rock) +
ggtitle("Pair Plots of Rock") +
theme(plot.title = element_text(hjust = 0.5, size=12, face="bold.italic"))
#Correlation between variables
cor(rock)
#Pair Plots
library(ggplot2)
library(GGally)
ggpairs(rock) +
ggtitle("Pair Plots of Rock") +
theme(plot.title = element_text(hjust = 0.5, size=12, face="bold.italic"))
#Correlation between variables
cor(rock)
#Pair Plots
library(ggplot2)
library(GGally)
ggpairs(rock) +
ggtitle("Pair Plots of Rock") +
theme(plot.title = element_text(hjust = 0.5, size=12, face="bold.italic"))
#Build up full model
full.lm = lm(formula = perm ~ ., data = rock)
print(summary(full.lm))
#Apply backward selection model
full.backward = step(full.lm, direction = "backward")
print(summary(full.backward))
#Apply forward selection model
full.forward <- step(lm(perm ~ 1, data=rock), list(upper=full.lm), direction='forward')
print(summary(full.forward))
#Build up full model
full.lm = lm(formula = perm ~ ., data = rock)
print(summary(full.lm))
#Apply backward selection model
full.backward = step(full.lm, direction = "backward")
print(summary(full.backward))
#Apply forward selection model
full.forward <- step(lm(perm ~ 1, data=rock), list(upper=full.lm), direction='forward')
print(summary(full.forward))
#Summarize the dataset
summary(rock)
?poly
#Polynomial Transformations
poly.lm = lm(formula = perm ~ area + peri + poly(shape,3), data = rock)
summary(poly.lm)
#Polynomial Transformations
poly.lm = lm(formula = perm ~ area + peri + poly(shape,-3), data = rock)
#Polynomial Transformations
poly.lm = lm(formula = perm ~ area + peri + poly(shape,3), data = rock)
summary(poly.lm)
termplot(poly.lm, partial=TRUE,terms = 1)
#Polynomial Transformations
poly.lm = lm(formula = perm ~ poly(area,4) + peri + shape, data = rock)
summary(poly.lm)
termplot(poly.lm, partial=TRUE,terms = 1)
#Polynomial Transformations
poly.lm = lm(formula = perm ~ poly(area,5) + peri + shape, data = rock)
summary(poly.lm)
termplot(poly.lm, partial=TRUE,terms = 1)
#Polynomial Transformations
poly.lm = lm(formula = perm ~ poly(area,3) + peri + shape, data = rock)
summary(poly.lm)
termplot(poly.lm, partial=TRUE,terms = 1)
#Polynomial Transformations on area
poly.lm.area = lm(formula = perm ~ poly(area,4) + peri + shape, data = rock)
summary(poly.lm.area)
#Nature of the fir
termplot(poly.lm.area, partial=TRUE,terms = 1)
#Polynomial Transformations on peir
poly.lm.peri = lm(formula = perm ~ area + poly(peri,4) + shape, data = rock)
summary(poly.lm.peri)
#Nature of the fir
termplot(poly.lm.peri, partial=TRUE,terms = 2)
#Polynomial Transformations on shape
poly.lm.shape = lm(formula = perm ~ area + peri + poly(shape,4), data = rock)
summary(poly.lm.shape)
#Nature of the fir
termplot(poly.lm.shape, partial=TRUE,terms = 2)
#Polynomial Transformations on area
poly.lm.area = lm(formula = perm ~ poly(area,4) + peri + shape, data = rock)
summary(poly.lm.area)
#Nature of the fit
termplot(poly.lm.area, partial=TRUE,terms = 1)
#Polynomial Transformations on peir
poly.lm.peri = lm(formula = perm ~ area + poly(peri,4) + shape, data = rock)
summary(poly.lm.peri)
#Nature of the fit
termplot(poly.lm.peri, partial=TRUE,terms = 2)
#Polynomial Transformations on shape
poly.lm.shape = lm(formula = perm ~ area + peri + poly(shape,4), data = rock)
summary(poly.lm.shape)
#Nature of the fit
termplot(poly.lm.shape, partial=TRUE,terms = 3)
#Box-Cox Transformation of the response
library(MASS)
bc.lm = boxcox(perm ~ area + peri + shape, data=rock)
#Box-Cox Transformation of the response
library(MASS)
full.bc = boxcox(perm ~ area + peri + shape, data=rock)
full.bc
full.bc$x[full.bc$y==max(full.bc$y)]
#Box-Cox Transformation of the response
library(MASS)
full.bc = boxcox(perm ~ area + peri + shape, data=rock)
lamda.max = full.bc$x[full.bc$y==max(full.bc$y)]
2^2
bc.lm = lm(perm^lamda.max ~ area + peri + shape, data=rock)
summary(bc.lm)
plot(full.lm)
plot(bc.lm)
bc.lm = lm(perm^lamda.max ~ area + peri + shape, data=rock)
summary(bc.lm)
anova(full.lm, bc.lm)
#Diagnostics befor transformation
plot(full.lm)
#Diagnostics after transformation
plot(bc.lm)
#Box-Cox Transformation of the response
library(MASS)
full.bc = boxcox(perm ~ area + peri + shape, data=rock)
#Get the lamda of maximum log-Likelihood
lamda.max = full.bc$x[full.bc$y==max(full.bc$y)]
#Set up new Model
bc.lm = lm(perm^lamda.max ~ area + peri + shape, data=rock)
summary(bc.lm)
library(splines)
#Spline Transformations on area
spli.lm.area = lm(formula = perm ~ bs(area,4) + peri + shape, data = rock)
summary(spli.lm.area)
#Nature of the fit
termplot(spli.lm.area, partial=TRUE,terms = 1)
#Polynomial Transformations on peir
spli.lm.peri = lm(formula = perm ~ area + bs(peri,4) + shape, data = rock)
summary(spli.lm.peri)
#Nature of the fit
termplot(spli.lm.peri, partial=TRUE,terms = 2)
#Polynomial Transformations on shape
spli.lm.shape = lm(formula = perm ~ area + peri + bs(shape,4), data = rock)
summary(spli.lm.shape)
#Nature of the fit
termplot(spli.lm.shape, partial=TRUE,terms = 3)
#Polynomial Transformations on area
poly.lm.area = lm(formula = perm ~ poly(area,4) + peri + shape, data = rock)
summary(poly.lm.area)
#Nature of the fit
termplot(poly.lm.area, partial=TRUE,terms = 1)
#Polynomial Transformations on peir
poly.lm.peri = lm(formula = perm ~ area + poly(peri,4) + shape, data = rock)
summary(poly.lm.peri)
#Nature of the fit
termplot(poly.lm.peri, partial=TRUE,terms = 2)
#Polynomial Transformations on shape
poly.lm.shape = lm(formula = perm ~ area + peri + poly(shape,4), data = rock)
summary(poly.lm.shape)
#Nature of the fit
termplot(poly.lm.shape, partial=TRUE,terms = 3)
library(splines)
#Spline Transformations on area
spli.lm.area = lm(formula = perm ~ bs(area,4) + peri + shape, data = rock)
summary(spli.lm.area)
#Nature of the fit
termplot(spli.lm.area, partial=TRUE,terms = 1)
#Polynomial Transformations on peir
spli.lm.peri = lm(formula = perm ~ area + bs(peri,4) + shape, data = rock)
summary(spli.lm.peri)
#Nature of the fit
termplot(spli.lm.peri, partial=TRUE,terms = 2)
#Polynomial Transformations on shape
spli.lm.shape = lm(formula = perm ~ area + peri + bs(shape,4), data = rock)
summary(spli.lm.shape)
#Nature of the fit
termplot(spli.lm.shape, partial=TRUE,terms = 3)
plot(full.lm)
predict(full.lm,se.fit=T,interval='prediction',level=0.99)
predict(full.lm,se.fit=T,interval='prediction',level=0.99)
perm
predict(full.lm,se.fit=T,interval='prediction',level=0.99)
rock$perm
1:5:45
full.pre = predict(full.lm,se.fit=T,interval='prediction',level=0.99)
summary(full.pre)
full.pre$fit[c(1,5,10,15,35,40,45), ]
rock$perm[c(1,5,10,15,35,40,45), ]
full.pre = predict(full.lm,se.fit=T,interval='prediction',level=0.99)
summary(full.pre)
full.pre$fit[c(1,5,10,15,35,40,45), ]
rock$perm[c(1,5,10,15,35,40,45)]
full.pre = predict(bc.lm,se.fit=T,interval='prediction',level=0.99)
summary(full.pre)
full.pre$fit[c(1,5,10,15,35,40,45), ]
rock$perm[c(1,5,10,15,35,40,45)]
full.pre = predict(bc.lm,se.fit=T,interval='prediction')
summary(full.pre)
full.pre$fit[c(1,5,10,15,35,40,45), ]
rock$perm[c(1,5,10,15,35,40,45)]
full.pre = predict(spli.lm.area,se.fit=T,interval='prediction')
summary(full.pre)
full.pre$fit[c(1,5,10,15,35,40,45), ]
rock$perm[c(1,5,10,15,35,40,45)]
full.pre = predict(spli.lm.peri,se.fit=T,interval='prediction')
summary(full.pre)
full.pre$fit[c(1,5,10,15,35,40,45), ]
rock$perm[c(1,5,10,15,35,40,45)]
full.pre = predict(spli.lm.area,se.fit=T,interval='prediction')
summary(full.pre)
full.pre$fit[c(1,5,10,15,35,40,45), ]
rock$perm[c(1,5,10,15,35,40,45)]
library(splines)
#Spline Transformations on area
spli.lm.area = lm(formula = perm ~ bs(area,3) + peri + shape, data = rock)
summary(spli.lm.area)
#Nature of the fit
termplot(spli.lm.area, partial=TRUE,terms = 1)
#Polynomial Transformations on peir
spli.lm.peri = lm(formula = perm ~ area + bs(peri,3) + shape, data = rock)
summary(spli.lm.peri)
#Nature of the fit
termplot(spli.lm.peri, partial=TRUE,terms = 2)
#Polynomial Transformations on shape
spli.lm.shape = lm(formula = perm ~ area + peri + bs(shape,3), data = rock)
summary(spli.lm.shape)
#Nature of the fit
termplot(spli.lm.shape, partial=TRUE,terms = 3)
full.pre = predict(lm(formula = perm ~ bs(area,3) + bs(peri,3) + shape),se.fit=T,interval='prediction')
full.pre = predict(lm(formula = perm ~ bs(area,3) + bs(peri,3) + shape, data=rock),se.fit=T,interval='prediction')
summary(full.pre)
full.pre$fit[c(1,5,10,15,35,40,45), ]
rock$perm[c(1,5,10,15,35,40,45)]
full.pre = predict(lm(formula = perm ~ bs(area,3) + peri+ shape, data=rock),se.fit=T,interval='prediction')
summary(full.pre)
full.pre$fit[c(1,5,10,15,35,40,45), ]
rock$perm[c(1,5,10,15,35,40,45)]
full.pre = predict(lm(formula = perm ~ area + peri+ shape, data=rock),se.fit=T,interval='prediction')
summary(full.pre)
full.pre$fit[c(1,5,10,15,35,40,45), ]
rock$perm[c(1,5,10,15,35,40,45)]
full.pre = predict(lm(formula = perm ~ bs(area,4) + peri+ shape, data=rock),se.fit=T,interval='prediction')
summary(full.pre)
full.pre$fit[c(1,5,10,15,35,40,45), ]
rock$perm[c(1,5,10,15,35,40,45)]
full.pre = predict(full.lm,se.fit=T,interval='prediction')
summary(full.pre)
full.pre$fit[c(1,5,10,15,35,40,45), ]
rock$perm[c(1,5,10,15,35,40,45)]
#Predict based on 99% prediction interval
full.pre = predict(full.lm,se.fit=T,interval='prediction', level = .99)
summary(full.pre)
#Check random sample results
sample = floor(runif(5, min=1, max=48))
full.pre$fit[sample, ]
rock$perm[sample]
library(splines)
#Spline Transformations on area
spli.lm.area = lm(formula = perm ~ bs(area,4) + peri + shape, data = rock)
summary(spli.lm.area)
#Nature of the fit
termplot(spli.lm.area, partial=TRUE,terms = 1)
#Polynomial Transformations on peir
spli.lm.peri = lm(formula = perm ~ area + bs(peri,4) + shape, data = rock)
summary(spli.lm.peri)
#Nature of the fit
termplot(spli.lm.peri, partial=TRUE,terms = 2)
#Polynomial Transformations on shape
spli.lm.shape = lm(formula = perm ~ area + peri + bs(shape,4), data = rock)
summary(spli.lm.shape)
#Nature of the fit
termplot(spli.lm.shape, partial=TRUE,terms = 3)
#Summarize the dataset
summary(rock)
#New observations
new.obs <- data.frame(
area = c(8, 80, 800, 8000, 80000),
peri = c(3, 30, 300, 3000, 30000),
shape = c(5, 50, 500, 0.5, 5000)
)
#Predict based on 99% prediction interval
full.pre = predict(full.lm, se.fit=T, newdata=new.obs, interval='prediction', level = .99)
summary(full.pre)
full.pre$fit
summary(full.lm)
#New observations
new.obs <- data.frame(
area = c(8, 80, 800, 800, 8000, 8000),
peri = c(3, 3, 30, 300, 3000, 3000),
shape = c(5, 5, 5, 5, 50, 0.5)
)
#Predict based on 99% prediction interval
full.pre = predict(full.lm, se.fit=T, newdata=new.obs, interval='prediction', level = .99)
full.pre$fit
#New observations
new.obs <- data.frame(
area = c(8, 800, 800, 800, 800, 8000),
peri = c(3, 3, 30, 300, 3000, 3000),
shape = c(5, 5, 5, 5, 5, 0.5)
)
#Predict based on 99% prediction interval
full.pre = predict(full.lm, se.fit=T, newdata=new.obs, interval='prediction', level = .99)
full.pre$fit
#New observations
new.obs <- data.frame(
area = c(8, 800, 800, 800, 800, 8000),
peri = c(3, 3, 30, 300, 3000, 3000),
shape = c(5, 50, 5, 500, 0.05, 0.5)
)
#Predict based on 99% prediction interval
full.pre = predict(full.lm, se.fit=T, newdata=new.obs, interval='prediction', level = .99)
full.pre$fit
help(roc)
"rock"
help(rock)
head(prostate)
str(prostate)
help("prostate")
#Summarize the dataset
summary(prostate)
#Distribution of response
library(ggplot2)
ggplot(prostate, aes(x=lpsa)) +
geom_histogram(aes(y=..density..), bins = 20,fill = "white", col = "black") +
geom_density(alpha=.2, fill="#FF6666") +
geom_rug() +
labs(title = 'Distribution of Lpsa') +
theme(plot.title = element_text(hjust = 0.5, size=12, face="bold.italic"))
#Correlation between variables
cor(prostate)
#Pair Plots
library(ggplot2)
library(GGally)
ggpairs(prostate) +
ggtitle("Pair Plots of Prostate") +
theme(plot.title = element_text(hjust = 0.5, size=12, face="bold.italic"))
#Build up full model
full.lm = lm(formula = lpsa ~ ., data = prostate)
print(summary(full.lm))
#Apply backward selection model
full.backward = step(full.lm, direction = "backward")
print(summary(full.backward))
#Apply forward selection model
full.forward <- step(lm(lpsa ~ 1, data=prostate), list(upper=full.lm), direction='forward')
print(summary(full.forward))
#Build up full model
full.lm = lm(formula = lpsa ~ ., data = prostate)
print(summary(full.lm))
#Apply backward selection model
full.backward = step(full.lm, direction = "backward")
print(summary(full.backward))
#Apply forward selection model
full.forward <- step(lm(lpsa ~ 1, data=prostate), list(upper=full.lm), direction='forward')
print(summary(full.forward))
#Box-Cox Transformation of the response
library(MASS)
full.bc = boxcox(lpsa ~ lcavol + lweight + age + lbph + svi, data=prostate)
#Box-Cox Transformation of the response
library(MASS)
full.bc = boxcox((lpsa+(-min(prostate$lpsa))) ~ lcavol + lweight + age + lbph + svi, data=prostate)
prostate$'shif_lpsa' = prostate$lpsa+(-min(prostate$lpsa))+1
View(prostate)
#Box-Cox Transformation of the response
#Shift lpsa to all postive value
prostate$'shift_lpsa' = prostate$lpsa+(-min(prostate$lpsa))+1
library(MASS)
full.bc = boxcox(shift_lpsa ~ lcavol + lweight + age + lbph + svi, data=prostate)
#Get the lamda of maximum log-Likelihood
lamda.max = full.bc$x[full.bc$y==max(full.bc$y)]
#Set up new Model
bc.lm = lm(shift_lpsa^lamda.max ~ lcavol + lweight + age + lbph + svi, data=prostate)
summary(bc.lm)
#Build up full model
full.lm = lm(formula = lpsa ~ ., data = prostate)
print(summary(full.lm))
#Apply backward selection model
full.backward = step(full.lm, direction = "backward")
print(summary(full.backward))
#Apply forward selection model
full.forward <- step(lm(lpsa ~ 1, data=prostate), list(upper=full.lm), direction='forward')
print(summary(full.forward))
#Build up full model
full.lm = lm(formula = lpsa ~ lcavol + lweight + age + lbph + svi + lcp + gleason +
pgg45, data = prostate)
print(summary(full.lm))
#Apply backward selection model
full.backward = step(full.lm, direction = "backward")
print(summary(full.backward))
#Apply forward selection model
full.forward <- step(lm(lpsa ~ 1, data=prostate), list(upper=full.lm), direction='forward')
print(summary(full.forward))
head(prostate)
str(prostate)
#Summarize the dataset
summary(prostate)
#Distribution of response
library(ggplot2)
ggplot(prostate, aes(x=lpsa)) +
geom_histogram(aes(y=..density..), bins = 20,fill = "white", col = "black") +
geom_density(alpha=.2, fill="#FF6666") +
geom_rug() +
labs(title = 'Distribution of Lpsa') +
theme(plot.title = element_text(hjust = 0.5, size=12, face="bold.italic"))
#Correlation between variables
cor(prostate)
#Pair Plots
library(ggplot2)
library(GGally)
ggpairs(prostate) +
ggtitle("Pair Plots of Prostate") +
theme(plot.title = element_text(hjust = 0.5, size=12, face="bold.italic"))
#Build up full model
full.lm = lm(formula = lpsa ~ lcavol + lweight + age + lbph + svi + lcp + gleason +
pgg45, data = prostate)
print(summary(full.lm))
#Apply backward selection model
full.backward = step(full.lm, direction = "backward")
print(summary(full.backward))
#Apply forward selection model
full.forward <- step(lm(lpsa ~ 1, data=prostate), list(upper=full.lm), direction='forward')
print(summary(full.forward))
#Box-Cox Transformation of the response
#Shift lpsa to all postive value
prostate$'shift_lpsa' = prostate$lpsa+(-min(prostate$lpsa))+1
library(MASS)
full.bc = boxcox(shift_lpsa ~ lcavol + lweight + age + lbph + svi, data=prostate)
#Get the lamda of maximum log-Likelihood
lamda.max = full.bc$x[full.bc$y==max(full.bc$y)]
#Set up new Model
bc.lm = lm(shift_lpsa^lamda.max ~ lcavol + lweight + age + lbph + svi, data=prostate)
summary(bc.lm)
my.lm = lm(lpsa ~ lcavol + lweight + age + lbph + svi, data = prostate)
summary(my.lm)
plot(my.lm)
my.lm = lm(lpsa ~ lcavol + lweight + lbph + svi, data = prostate)
summary(my.lm)
plot(my.lm)
my.lm = lm(lpsa ~ lcavol + lweight + age + lbph + svi, data = prostate)
summary(my.lm)
plot(my.lm)
#Summarize the dataset
summary(prostate)
head(prostate)
str(prostate)
#Summarize the dataset
summary(prostate)
library(faraway)
head(prostate)
str(prostate)
library(faraway)
head(prostate)
str(prostate)
library(faraway)
head(prostate)
str(prostate)
#Summarize the dataset
summary(prostate)
#Distribution of response
library(ggplot2)
ggplot(prostate, aes(x=lpsa)) +
geom_histogram(aes(y=..density..), bins = 20,fill = "white", col = "black") +
geom_density(alpha=.2, fill="#FF6666") +
geom_rug() +
labs(title = 'Distribution of Lpsa') +
theme(plot.title = element_text(hjust = 0.5, size=12, face="bold.italic"))
#Correlation between variables
cor(prostate)
#Pair Plots
library(ggplot2)
library(GGally)
ggpairs(prostate) +
ggtitle("Pair Plots of Prostate") +
theme(plot.title = element_text(hjust = 0.5, size=12, face="bold.italic"))
#Build up full model
full.lm = lm(formula = lpsa ~ lcavol + lweight + age + lbph + svi + lcp + gleason +
pgg45, data = prostate)
print(summary(full.lm))
#Apply backward selection model
full.backward = step(full.lm, direction = "backward")
print(summary(full.backward))
#Apply forward selection model
full.forward <- step(lm(lpsa ~ 1, data=prostate), list(upper=full.lm), direction='forward')
print(summary(full.forward))
#Box-Cox Transformation of the response
#Shift lpsa to all postive value
prostate$'shift_lpsa' = prostate$lpsa+(-min(prostate$lpsa))+1
library(MASS)
full.bc = boxcox(shift_lpsa ~ lcavol + lweight + age + lbph + svi, data=prostate)
#Get the lamda of maximum log-Likelihood
lamda.max = full.bc$x[full.bc$y==max(full.bc$y)]
#Set up new Model
bc.lm = lm(shift_lpsa^lamda.max ~ lcavol + lweight + age + lbph + svi, data=prostate)
summary(bc.lm)
my.lm = lm(lpsa ~ lcavol + lweight + age + lbph + svi, data = prostate)
summary(my.lm)
plot(my.lm)
#New observations
new.obs <- data.frame(
area = c(8, 800, 800, 800, 800, 8000),
peri = c(3, 3, 30, 300, 3000, 3000),
shape = c(5, 50, 5, 500, 0.05, 0.5)
)
#Predict based on 99% prediction interval
full.pre = predict(full.lm, se.fit=T, newdata=new.obs, interval='prediction', level = .99)
runif(4,0,1)
#New observations
new.obs <- data.frame(
lcavol = runif(5, min = -2, max = 4),
lweight = runif(5, min = 2, max = 6),
age = floor(runif(5, min = 41, max = 79)),
lbph = runif(5, min = -2, max = 3),
svi = c(0,1,0,1,0),
lpsa = runif(5, min = -1, max = 6)
)
#Predict based on 99% prediction interval
my.pre = predict(my.lm, se.fit=T, newdata=new.obs, interval='prediction', level = .99)
my.pre$fit
summary(my.lm)
