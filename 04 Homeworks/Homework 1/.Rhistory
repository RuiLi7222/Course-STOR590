setwd("~/")
setwd("~/FILES/UNC Course/STOR Major/STOR 590/R Lecture")
?rug
setwd("~/FILES/UNC Course/STOR Major/STOR 590/Homeworks/Homework 1")
> <span style="color:blue"> **Please turn off the display of example code chunks (by specifying `include=FALSE`), complete the exercise code chunks (remember to turn on the `eval` option), fill in your name and create a PDF document, then print and submit it.** </span>
# Basics in **R**
<span style="color:blue"> **Please turn off the display of example code chunks (by specifying `include=FALSE`), complete the exercise code chunks (remember to turn on the `eval` option), fill in your name and create a PDF document, then print and submit it.** </span>
# Basics in **R**
#Import Proportion Not Returned.csv
library(readr)
dataset <- read_csv("ProportionNotReturned.csv")
#Have a general idea about the dataset
head(dataset)
summary(dataset)
View(dataset)
#Import Proportion Not Returned.csv
library(readr)
dataset <- read_csv("ProportionNotReturned.csv", col_names = TRUE)
#Have a general idea about the dataset
head(dataset)
summary(dataset)
#Import Proportion Not Returned.csv
library(readr)
dataset <- read_csv("ProportionNotReturned.csv", header = TRUE)
#Import Proportion Not Returned.csv
library(readr)
dataset <- read_csv("ProportionNotReturned.csv")
#Have a general idea about the dataset
head(dataset)
summary(dataset)
#Summarize the PNR variable
hist(dataset$PNR,main='Proportion Absentee Ballots Not Returned - NC Nov 2018')
plot(density(dataset$PNR),main='Proportion Absentee Ballots Not Returned - NC Nov 2018')
rug(dataset$PNR)
library(ggplot2)
ggplot(dataset, aes(x=PNR)) + geom_histogram() + labs(title = 'PNR - NC Nov 2018')
library(ggplot2)
ggplot(dataset, aes(x=PNR)) + geom_histogram(bins = 20) + labs(title = 'PNR - NC Nov 2018')
library(ggplot2)
ggplot(dataset, aes(x=PNR)) + geom_histogram(bins = 20,color = "blue") + labs(title = 'Proportion Absentee Ballots Not Returned - NC Nov 2018') + theme(plot.title = element_text(hjust = 0.5, size=10, face="bold.italic"))
library(ggplot2)
ggplot(dataset, aes(x=PNR)) + geom_histogram(bins = 20,fill = "blue") + labs(title = 'Proportion Absentee Ballots Not Returned - NC Nov 2018') + theme(plot.title = element_text(hjust = 0.5, size=10, face="bold.italic"))
#Summarize the PNR variable
library(ggplot2)
ggplot(dataset, aes(x=PNR)) +
geom_histogram(aes(y=..density..), bins = 20,fill = "blue") +
geom_density(alpha=.2, fill="#FF6666") +
geom_rug() +
labs(title = 'Proportion Absentee Ballots Not Returned - NC Nov 2018') +
theme(plot.title = element_text(hjust = 0.5, size=12, face="bold.italic"))
#Summarize the PNR variable
library(ggplot2)
ggplot(dataset, aes(x=PNR)) +
geom_histogram(aes(y=..density..), bins = 20,fill = "white") +
geom_density(alpha=.2, fill="#FF6666") +
geom_rug() +
labs(title = 'Proportion Absentee Ballots Not Returned - NC Nov 2018') +
theme(plot.title = element_text(hjust = 0.5, size=12, face="bold.italic"))
#Summarize the PNR variable
library(ggplot2)
ggplot(dataset, aes(x=PNR)) +
geom_histogram(aes(y=..density..), bins = 20,fill = "white", col = "black") +
geom_density(alpha=.2, fill="#FF6666") +
geom_rug() +
labs(title = 'Proportion Absentee Ballots Not Returned - NC Nov 2018') +
theme(plot.title = element_text(hjust = 0.5, size=12, face="bold.italic"))
?lm
wts = dataset$PNR<0.1
#Extract subdataset from the original dataset
pnr.df = dataset[,2:11]
#Build up full model
full.lm = lm(formula = PNR ~ ., data = pnr.df, weights=as.numeric(wts))
View(pnr.df)
summary(full.lm)
clear
?step
lowest.step.forward <- step(lm(PNR ~ 1, data=pnr.df), list(upper=full.lm), direction='forward')
print(summary(lowest.step.forward))
library(ggplot2)
backward.diag = diagPlot(backward.lm)
install.packages("ggfortify")
library(ggfortify)
backward.diag = autoplot(backward.lm)
#Optimal model of backward selection
backward.lm = lm(formula = PNR ~ Pop + Hsgrad + Black, data = pnr.df, weights = as.numeric(wts))
#Diagnostics of backward optimal model
library(ggfortify)
backward.diag = autoplot(backward.lm)
#Summarize the PNR variable
library(ggplot2)
ggplot(dataset, aes(x=PNR)) +
geom_histogram(aes(y=..density..), bins = 20,fill = "white", col = "black") +
geom_density(alpha=.2, fill="#FF6666") +
geom_rug() +
labs(title = 'Proportion Absentee Ballots Not Returned - NC Nov 2018') +
theme(plot.title = element_text(hjust = 0.5, size=12, face="bold.italic"))
#Extract PNR and other predicted variables
pnr.df = dataset[,2:11]
#Omitting Bladen and Robeson counties with weights
wts = pnr.df$PNR<0.1
#Build up full model
full.lm = lm(formula = PNR ~ ., data = pnr.df, weights=as.numeric(wts))
print(summary(full.lm))
#Apply backward selection model
full.backward = step(full.lm, direction = "backward")
print(summary(full.backward))
#Apply forward selection model
full.forward <- step(lm(PNR ~ 1, data=pnr.df), list(upper=full.lm), direction='forward')
print(summary(full.forward))
#Optimal model of backward selection
backward.lm = lm(formula = PNR ~ Pop + Hsgrad + Black, data = pnr.df, weights = as.numeric(wts))
#Diagnostics of backward optimal model
library(ggfortify)
backward.diag = autoplot(backward.lm)
plot(backward.lm)
#Optimal model of backward selection
backward.lm = lm(formula = PNR ~ Pop + Hsgrad + Black, data = pnr.df, weights = as.numeric(wts))
#Diagnostics of backward optimal model
plot(backward.lm)
#Optimal model of forward selection
forward.lm = lm(formula = PNR ~ Black, data = pnr.df, weights = as.numeric(wts))
#Diagnostics of backward optimal model
plot(forward.lm)
#Choose backward model as the optimal model
opt.lm = backward.lm
#Predict based on 99% prediction interval
opt.pre.99=predict(opt.lm,se.fit=T,interval='prediction',level=0.99,weights=1)
opt.pre.99$fit[c(9,78),]
#Choose backward model as the optimal model
opt.lm = backward.lm
#Predict based on 99% prediction interval
opt.pre.99=predict(opt.lm,se.fit=T,interval='prediction',level=0.99,weights=1)
opt.pre.99$fit[c(9,78),]
excess.PNR=pnr.df[c(9,78),'PNR']-opt.pre.99$fit[c(9,78),'upr']
excess_PNR
excess.PNR=pnr.df[c(9,78),'PNR']-opt.pre.99$fit[c(9,78),'upr']
excess.PNR
excess.PNR=pnr.df[c(9,78),'PNR']-opt.pre.99$fit[c(9,78),'upr']
excess.PNR
unaccount=excess.PNR*dataset[c(9,78),'AbsBal']
unaccount
total=642.6514 + 1254.5709
total
total=sum(excess.PNR*dataset[c(9,78),'AbsBal'])
total=sum(excess.PNR*dataset[c(9,78),'AbsBal'])
print(total)
total=sum(excess.PNR*dataset[c(9,78),'AbsBal'])
print(total)
print(905/(905+total))
